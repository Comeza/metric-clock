{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","state","timeInSeconds","getMetricTime","setInterval","setState","divisee","base","Math","round","floor","dte","Date","hrs","getHours","min","getMinutes","sec","getSeconds","mil","getMilliseconds","totalmetsecs","parseInt","this","mod","map","n","join","id","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAGqBA,G,kNACnBC,MAAQ,CAAEC,cAAe,EAAKC,iB,kEAET,IAAD,OAClBC,aAAY,WACV,EAAKC,SAAS,CACZH,cAAe,EAAKC,oBAErB,O,0BAGDG,EAAiBC,GACnB,OAAOC,KAAKC,MAAMH,EAAUE,KAAKE,MAAMJ,EAAUC,GAAQA,K,sCAIzD,IAAII,EAAM,IAAIC,KACVC,EAAMF,EAAIG,WACVC,EAAMJ,EAAIK,aACVC,EAAMN,EAAIO,aACVC,EAAMR,EAAIS,kBAEVC,EAAeC,SAAS,GAAD,QADZH,EAAY,IAANF,EAAmB,IAANF,EAAa,GAAW,IAANF,EAAa,GAAK,IAC5B,MAK1C,MAAO,CAJMS,SAAS,GAAD,OAAID,EAAe,MAC3BC,SAAS,GAAD,OAAIC,KAAKC,IAAIH,EAAc,KAAS,MAC5CE,KAAKC,IAAIH,EAAc,MAEJI,KAAI,SAACC,GAAD,OAAQA,GAAK,EAAL,WAAaA,GAAb,UAAsBA,MAAMC,KAAK,O,+BAI7E,OACE,qBAAKC,GAAG,MAAR,SACE,8BAAML,KAAKtB,MAAMC,sB,GAjCQ2B,cCWlBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAE1Bb,M","file":"static/js/main.48987190.chunk.js","sourcesContent":["import 'index.sass';\nimport React, { Component } from 'react';\n\nexport default class App extends Component<{}, { timeInSeconds: string }> {\n  state = { timeInSeconds: this.getMetricTime() };\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        timeInSeconds: this.getMetricTime(),\n      });\n    }, 200);\n  }\n\n  mod(divisee: number, base: number) {\n    return Math.round(divisee - Math.floor(divisee / base) * base);\n  }\n\n  getMetricTime(): string {\n    var dte = new Date();\n    var hrs = dte.getHours();\n    var min = dte.getMinutes();\n    var sec = dte.getSeconds();\n    var mil = dte.getMilliseconds();\n    var totalmil = mil + sec * 1000 + min * 1000 * 60 + hrs * 1000 * 60 * 60;\n    var totalmetsecs = parseInt(`${totalmil / 864}`);\n    var methrs = parseInt(`${totalmetsecs / 10000}`);\n    var metmin = parseInt(`${this.mod(totalmetsecs, 10000) / 100}`);\n    var metsec = this.mod(totalmetsecs, 100);\n\n    return [methrs, metmin, metsec].map((n) => (n <= 9 ? `0${n}` : `${n}`)).join(':');\n  }\n\n  render() {\n    return (\n      <div id=\"app\">\n        <div>{this.state.timeInSeconds}</div>\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}